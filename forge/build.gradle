plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        dataGen {
            mod "reterraforged"
        }
    
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "reterraforged-common.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                "src/generated/resources"
            ]
        }
    }
}

processResources {
    duplicatesStrategy 'exclude'
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-" + loom.platform.get().name()
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar

    archiveClassifier = loom.platform.get().name()
}

sourcesJar {
   duplicatesStrategy 'exclude'
}

jar {
    archiveClassifier = "dev"
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}